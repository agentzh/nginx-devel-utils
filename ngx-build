#!/usr/bin/env perl

use strict;
use warnings;

use File::Spec ();
use Getopt::Std;
use Cwd ();

my $cc = $ENV{NGX_BUILD_CC};
my $optimize = $ENV{NGX_BUILD_OPT};
my $jobs = $ENV{NGX_BUILD_JOBS} || 1;
my $disable_no_pool = $ENV{NGX_BUILD_DISABLE_NO_POOL};
my $no_debug = $ENV{NGX_BUILD_NO_DEBUG};
my $dtrace = $ENV{NGX_BUILD_DTRACE};
my $cc_opts = $ENV{NGX_BUILD_CC_OPTS};
my $ld_opts = $ENV{NGX_BUILD_LD_OPTS};
my $extra_config_opts = $ENV{NGX_BUILD_EXTRA_CONFIG_OPTS};

my %opts;
getopts("fp:", \%opts) or usage();

if (@ARGV == 0) {
    usage();
}

my $force = $opts{f};
if ($force) {
    shift;
}

my $patch = $opts{p};
if ($patch) {
    $patch = File::Spec->rel2abs($patch);
}

my $version = shift or
    usage();

if ($version !~ /^(\d+)\.(\d+)\.(\d+)$/) {
    warn "bad nginx version number: $version\n";
    usage();
}

my @ver = ($2, $2, $3);
my $ver = sprintf("%03d%03d%03d", $1, $2, $3);

my @opts;
if (($1 == 1 && $2 == 1 && $3 >= 4)
    || ($1 == 1 && $2 > 1)
    || ($1 > 1))
{
    for my $arg (@ARGV) {
        if ($arg =~ /^--add-module=.*?ngx_http_upstream_keepalive/) {
            next;
        }
        push @opts, $arg;
    }

} else {
    @opts = @ARGV;
}

if (defined $extra_config_opts) {
    push @opts, split /\s+/, $extra_config_opts;
}

for (@opts) {
    # TODO: we can process paths in other options as well
    s/^(--add-module=)(\S+)/$1 . Cwd::realpath($2)/ge;
}

push @opts, '--with-poll_module';

if ($dtrace) {
    push @opts, '--with-dtrace-probes';
}

my $found_cc_opt;
my @new_opts;
for my $opt (@opts) {
    if ($no_debug && $opt eq '--with-debug') {
        next;
    }

    if (defined $cc) {
        if ($opt =~ /^--with-cc=/) {
            next;
        }
    }

    if (defined $optimize) {
        if ($opt =~ /^--with-cc-opt=/) {
            if ($opt =~ s/-O\d?\b/$optimize/g) {
                $found_cc_opt = 1;

            } else {
                $opt .= " $optimize";
            }

            $found_cc_opt = 1;
        }
    }

    if (defined $cc_opts) {
        if ($opt =~ s/^--with-cc-opt=/$&$cc_opts /) {
            undef $cc_opts;
        }
    }

    if (defined $ld_opts) {
        if ($opt =~ s/^--with-ld-opt=/$&$ld_opts /) {
            undef $ld_opts;
        }
    }

    push @new_opts, $opt;
}

@opts = @new_opts;

#die "options: @opts\n";

if (defined $cc) {
    push @opts, "--with-cc=$cc";
}

if (defined $optimize && !$found_cc_opt) {
    if (defined $cc_opts) {
        $cc_opts .= " $optimize";

    } else {
        $cc_opts = $optimize;
    }
}

if (defined $cc_opts) {
    push @opts, "--with-cc-opt=$cc_opts";
    undef $cc_opts;
}

if (defined $ld_opts) {
    push @opts, "--with-ld-opt=$ld_opts";
    undef $ld_opts;
}

my $root = `pwd`;
chomp $root;
my $target = "$root/work/nginx";

my $home = `cd ~ && pwd`;
chomp $home;

my $build_root = "buildroot";
if (! -d $build_root) {
    mkdir $build_root or
        die "failed to create directory $build_root.\n";
}

chdir $build_root or
    die "failed to switch to directory $build_root\n";

my $tarball = "nginx-$version.tar.gz";
if ($force || ! -f $tarball || ! -d "nginx-$version") {
    if (!-d "$home/work") {
        mkdir "$home/work" or
            die "failed to create directory ~/work\n";
    }

    if (-f "$home/work/$tarball") {
        shell("cp $home/work/$tarball ./");

    } else {
        shell("axel -n2 -o $home/work/$tarball http://nginx.org/download/$tarball");
        shell("cp $home/work/$tarball ./");
    }

    shell("tar -xzvf $tarball");

    apply_patches();
}

chdir "nginx-$version" or die "cannot switch to nginx-$version\n";

if ($force || ! -f "Makefile" || -M "$root/config" < -M "Makefile"
    || (-f "$root/util/build.sh"
        && -M "$root/util/build.sh" < -M "Makefile")
    || (-f "$root/util/build2.sh"
        && -M "$root/util/build2.sh" < -M "Makefile"))
{
    configure_nginx();
}

if (-f "$target/logs/nginx.pid") {
    system("kill -QUIT `cat $target/logs/nginx.pid") == 0 or
        warn "failed to quit existing nginx.\n";
}

my $make = 'make';
if ($^O eq 'solaris') {
    $make = 'gmake';
}

shell("$make -j$jobs");
shell("$make install");

sub configure_nginx {
    warn "./configure --prefix=$target @opts\n";
    system("./configure", "--prefix=$target",
        @opts) == 0 or
            die "failed to configure nginx.\n";
}

sub apply_patches {
    if ($patch) {
        shell("patch -p0 < $patch");
    }

    unless ($disable_no_pool) {
        warn "applying no-pool patch...\n";
        shell("patch -p0 < $root/../no-pool-nginx/nginx-$version-no_pool.patch");
    }

    shell(". $root/../openresty/util/base && apply_nginx_patches nginx-$version $version");
}

sub usage {
    die "Usage: $0 <nginx-version> <options>\n";
}

sub shell {
    my $cmd = shift;
    warn "$cmd\n";
    system($cmd) == 0 or
        die "failed to run command \"$cmd\"\n";
}
